plugins {
    id "com.stehno.gradle.webpreview" version "0.3.0"
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id 'java'
    id 'jacoco'
    id 'org.asciidoctor.convert' version '1.5.3'
    id 'com.stehno.gradle.site' version '0.0.3'
    id "com.github.johnrengelman.shadow" version '2.0.1'
}

group = 'io.github.http-builder-ng'
version = '1.0.4'

repositories {
    jcenter()
}

configurations {
    asciidoclet
}

dependencies {
    asciidoclet 'org.asciidoctor:asciidoclet:1.+'
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = project.parent.group
    version = project.parent.version

    sourceCompatibility = 8
    targetCompatibility = 8

    repositories {
        jcenter()
    }

    configurations {
        asciidoclet
    }

    dependencies {
        // optionals
        [
            'com.opencsv:opencsv:3.8',
            'oauth.signpost:signpost-commonshttp4:1.2.1.1',
            'oauth.signpost:signpost-core:1.2.1.1',
            'org.codehaus.groovy:groovy-all:2.4.8',
            'org.jsoup:jsoup:1.9.2',
            'net.sourceforge.nekohtml:nekohtml:1.9.22',
            'com.fasterxml.jackson.core:jackson-databind:2.8.1',
            'javax.mail:javax.mail-api:1.5.6',
            'com.sun.mail:javax.mail:1.5.6'
        ].each { opt ->
            compileOnly(opt)
            testCompile(opt)
        }

        testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'

        testCompile 'com.stehno.ersatz:ersatz:1.5.0:safe@jar'
        testCompile 'org.hamcrest:hamcrest-library:1.3'

        testCompile 'com.stehno.vanilla:vanilla-core:0.5.1'

        testCompile 'org.slf4j:jcl-over-slf4j:1.7.25'
        testCompile 'ch.qos.logback:logback-classic:1.2.3'

        asciidoclet 'org.asciidoctor:asciidoclet:1.+'
    }

    test {
        systemProperty 'test.proxy.support', 'false'
        reports.html.enabled = true
        maxParallelForks = 4
    }

    jacocoTestReport {
        reports {
            xml.enabled = false
            html.enabled = false
        }
    }

    javadoc {
        options.docletpath = configurations.asciidoclet.files.asType(List)
        options.links("http://docs.oracle.com/javase/8/docs/api/", "http://docs.groovy-lang.org/latest/html/gapi/");
        options.doclet = 'org.asciidoctor.Asciidoclet'
        options.overview = "src/main/java/overview.adoc"
        options.addStringOption "-base-dir", "${projectDir}"
        options.addStringOption "-attribute", "name=${project.name},version=${project.version},title-link=https://github.com/http-builder-ng/http-builder-ng[${project.name} ${project.version}]"
    }

    task sourcesJar(type: Jar) {
        description = 'Creates sources jar.'
        classifier = 'sources'
        from project.sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        description = 'Creates API documentation jar.'
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
        archives shadowJar
    }

    publishing {
        publications {
            httpbPublication(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                artifact shadowJar
                groupId project.group
                artifactId project.name
                version project.version
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', 'Groovy client for making http requests.')
                    root.appendNode('name', project.name)
                    root.appendNode('url', 'https://http-builder-ng.github.io/http-builder-ng/')

                    def licenseNode = root.appendNode('licenses').appendNode('license')
                    licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                    licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                    licenseNode.appendNode('distribution', 'repo')

                    def developersNode = root.appendNode('developers')
                    def developerNode = developersNode.appendNode('developer')
                    developerNode.appendNode('id', 'dwclark')
                    developerNode.appendNode('name', 'David Clark')

                    developerNode = developersNode.appendNode('developer')
                    developerNode.appendNode('id', 'cjstehno')
                    developerNode.appendNode('name', 'Christopher J Stehno')
                    developerNode.appendNode('email', 'chris@stehno.com')

                    def scmNode = root.appendNode('scm')
                    scmNode.appendNode('connection', 'scm:git:git@github.com:http-builder-ng/http-builder-ng.git')
                    scmNode.appendNode('developerConnection', 'scm:git:git@github.com:http-builder-ng/http-builder-ng.git')
                    scmNode.appendNode('url', 'https://github.com/http-builder-ng/http-builder-ng')
                }
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

asciidoctor {
    options doctype: 'book'

    backends = ['html5']

    attributes 'source-highlighter': 'coderay',
        'coderay-linenums-mode': 'table',
        icon: 'font',
        linkattrs: true,
        encoding: 'utf-8'
}

tasks.site.dependsOn = [
    'build', 'http-builder-ng-core:build', 'http-builder-ng-apache:build', 'http-builder-ng-okhttp:build',
    'http-builder-ng-core:javadoc', 'http-builder-ng-apache:javadoc', 'http-builder-ng-okhttp:javadoc',
    'http-builder-ng-core:jacocoTestReport', 'http-builder-ng-apache:jacocoTestReport', 'http-builder-ng-okhttp:jacocoTestReport',
    'http-builder-ng-core:spotbugsMain', 'http-builder-ng-apache:spotbugsMain', 'http-builder-ng-okhttp:spotbugsMain',
    'aggregateJavadoc', 'aggregateTestReport', 'aggregateCoverage',
    'asciidoctor'
]

site {
    siteUrl = 'https://http-builder-ng.github.io/http-builder-ng/'

    assetDir( 'http-builder-ng-core/build/reports', into:'core', external:true )
    assetDir( 'http-builder-ng-apache/build/reports', into:'apache', external:true )
    assetDir( 'http-builder-ng-okhttp/build/reports', into:'okhttp', external:true )

    versionedFile 'src/docs/asciidoc/index.adoc'
    versionedFile 'src/docs/asciidoc/configuration.adoc'
    versionedFile 'src/docs/asciidoc/examples.adoc'

    testedPath '/guide/html5/index.html'
    testedPath '/core/javadoc/index.html'
}

task publishSite(type: GradleBuild, group: 'Publishing', description: 'Publishes the documentation web site.', dependsOn: ['site']) {
    buildFile = 'publish.gradle'
    tasks = ['publishGhPages']
}

task verifyArtifacts(group: 'Verification', description: 'Verifies that the published artifacts exist in the remote repository.') {
    doLast {
        def base = 'https://dl.bintray.com/http-builder-ng/dclark/org/codehaus/groovy/modules'
        ///${project.version}/"
        def artifacts = [
            "$base/http-builder-ng-core/$project.version/http-builder-ng-core-$project.version-sources.jar",
            "$base/http-builder-ng-core/$project.version/http-builder-ng-core-${project.version}.jar",
            "$base/http-builder-ng-core/$project.version/http-builder-ng-core-${project.version}.pom",

            "$base/http-builder-ng-apache/$project.version/http-builder-ng-apache-$project.version-sources.jar",
            "$base/http-builder-ng-apache/$project.version/http-builder-ng-apache-${project.version}.jar",
            "$base/http-builder-ng-apache/$project.version/http-builder-ng-apache-${project.version}.pom",

            "$base/http-builder-ng-okhttp/$project.version/http-builder-ng-okhttp-$project.version-sources.jar",
            "$base/http-builder-ng-okhttp/$project.version/http-builder-ng-okhttp-${project.version}.jar",
            "$base/http-builder-ng-okhttp/$project.version/http-builder-ng-okhttp-${project.version}.pom"
        ]

        logger.lifecycle "Verifying that artifacts exist at $base..."

        boolean published = artifacts.every { art ->
            boolean ok = checkUrl(art)
            logger.info " - Checking: $art: ${ok ? 'ok' : 'missing'}"
            ok
        }

        assert published, 'Some or all of the artifacts are not published. Run with --info for more details.'
    }
}

task release(group: 'Development', description: 'Release a new version of the library.', dependsOn: [
    'checkVersion',
    'clean', 'http-builder-ng-core:clean', 'http-builder-ng-apache:clean', 'http-builder-ng-okhttp:clean',
    'build', 'http-builder-ng-core:build', 'http-builder-ng-apache:build', 'http-builder-ng-okhttp:build',
    'http-builder-ng-core:bintrayUpload', 'http-builder-ng-apache:bintrayUpload', 'http-builder-ng-okhttp:bintrayUpload',
    'publishSite'
]) {
    doLast {
        logger.lifecycle 'Library has been released - confirm the Bintray publications and run "./gradlew verifyRelease"'
    }
}

task verifyRelease(group: 'Verification', description: 'Verifies that the release was successful.', dependsOn: ['verifyArtifacts', 'verifySite']) {
    doLast {
        logger.lifecycle 'Release has been verified.'
    }
}

def publishedProjects = subprojects.findAll()

task aggregateJavadoc(type: Javadoc, group: 'Documentation') {
    description = 'Generates an aggregated Javadoc document.'

    source publishedProjects.collect { it.sourceSets.main.allJava }
    classpath = files(publishedProjects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")

    options.docletpath = configurations.asciidoclet.files.asType(List)
    options.links('http://docs.oracle.com/javase/8/docs/api/', 'http://docs.groovy-lang.org/latest/html/gapi/');
    options.doclet = 'org.asciidoctor.Asciidoclet'
    options.overview = 'src/docs/overview.adoc'
    options.addStringOption "-base-dir", "${projectDir}"
    options.addStringOption "-attribute", "name=${project.name},version=${project.version},title-link=https://github.com/http-builder-ng/http-builder-ng[${project.name} ${project.version}]"
}

task aggregateCoverage(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'

    dependsOn(publishedProjects.test)

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData = files(publishedProjects.jacocoTestReport.executionData)

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

task aggregateTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn subprojects*.test
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

allprojects {
    tasks.withType(Test).configureEach {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        if (!project.hasProperty("createReports")) {
            reports.html.required = false
            reports.junitXml.required = false
        }
    }

}
